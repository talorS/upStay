import { IItem, IPaginatedItems, ISortedItemRepository } from './model';
import { Redis, Cluster } from 'ioredis';
export declare class SortedItemRepository<T> implements ISortedItemRepository<T> {
    readonly name: string;
    readonly redis: Redis | Cluster;
    private readonly keyPrefix;
    private readonly hashPrefix;
    constructor(name: string, redis?: Redis | Cluster);
    set(item: IItem<T>): Promise<void>;
    getById(id: string): Promise<IItem<T> | null>;
    getAll(): Promise<IItem<T>[]>;
    getItemScoreById(id: string): Promise<number | null>;
    getItemsByScore(min: number, max: number): Promise<IItem<T>[]>;
    getPaginated(page: number, pageSize: number): Promise<IPaginatedItems<T>>;
    deletePage(page: number, pageSize: number): Promise<void>;
    hasItem(id: string): Promise<boolean>;
    deleteById(id: string): Promise<void>;
    count(): Promise<number>;
    deleteAll(): Promise<void>;
    getFirstNItems(n: number): Promise<IItem<T>[]>;
    getLastNItems(n: number): Promise<IItem<T>[]>;
    getItemsInRange(start: number, end: number): Promise<IItem<T>[]>;
    existsInRange(min: number, max: number): Promise<boolean>;
    getNextNItemsGreaterThanScore(score: number, n: number): Promise<IItem<T>[]>;
}
export default SortedItemRepository;
