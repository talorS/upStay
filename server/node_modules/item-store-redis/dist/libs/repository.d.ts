/// <reference types="node" />
/// <reference types="bun-types" />
import Redis, { Cluster } from 'ioredis';
import { IItem, IItemRepository, IPaginatedItems } from './model';
export declare function bufferToItem<T>(buffer: Buffer | null): IItem<T> | null;
export declare class ItemRepository<T> implements IItemRepository<T> {
    readonly name: string;
    readonly redis: Redis | Cluster;
    private readonly keyPrefix;
    constructor(name: string, redis?: Redis | Cluster);
    set(item: IItem<T>, expirationInSeconds?: number): Promise<void>;
    getById(id: string): Promise<IItem<T> | null>;
    getAll(): Promise<IItem<T>[]>;
    getPaginated(page: number, pageSize: number): Promise<IPaginatedItems<T>>;
    hasItem(id: string): Promise<boolean>;
    deleteById(id: string): Promise<void>;
    deleteAll(): Promise<void>;
    count(): Promise<number>;
    private getKey;
}
export default ItemRepository;
