"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemRepository = exports.bufferToItem = void 0;
const ioredis_1 = __importDefault(require("ioredis"));
const msgpack_1 = require("@msgpack/msgpack");
function bufferToItem(buffer) {
    if (!buffer)
        return null;
    const item = (0, msgpack_1.decode)(buffer);
    return item;
}
exports.bufferToItem = bufferToItem;
class ItemRepository {
    constructor(name, redis = new ioredis_1.default()) {
        this.name = name;
        this.redis = redis;
        this.keyPrefix = `items:${name}:`;
    }
    set(item, expirationInSeconds) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.getKey(item.id);
            const buffer = (0, msgpack_1.encode)(item);
            if (expirationInSeconds != null) {
                yield this.redis.setex(key, expirationInSeconds, Buffer.from(buffer));
            }
            else {
                yield this.redis.set(key, Buffer.from(buffer));
            }
        });
    }
    getById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.getKey(id);
            const result = yield this.redis.getBuffer(key);
            return bufferToItem(result);
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = yield this.redis.keys(this.getKey('*'));
            if (keys.length === 0) {
                return [];
            }
            const buffers = yield this.redis.mgetBuffer(keys);
            return buffers.map((b) => bufferToItem(b));
        });
    }
    getPaginated(page, pageSize) {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = yield this.redis.keys(this.getKey('*'));
            const count = keys.length;
            const start = (page - 1) * pageSize;
            const end = start + pageSize - 1;
            const itemKeys = keys.slice(start, end + 1);
            if (itemKeys.length === 0) {
                return {
                    items: [],
                    count: 0
                };
            }
            const buffers = yield this.redis.mgetBuffer(itemKeys);
            const items = buffers.map((b) => bufferToItem(b));
            return {
                items,
                count
            };
        });
    }
    hasItem(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.getKey(id);
            return (yield this.redis.exists(key)) === 1;
        });
    }
    deleteById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.getKey(id);
            yield this.redis.del(key);
        });
    }
    deleteAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = yield this.redis.keys(this.getKey('*'));
            if (keys.length > 0) {
                yield this.redis.del(keys);
            }
        });
    }
    count() {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = yield this.redis.keys(this.getKey('*'));
            return keys.length;
        });
    }
    getKey(id) {
        return `${this.keyPrefix}${id}`;
    }
}
exports.ItemRepository = ItemRepository;
exports.default = ItemRepository;
